name: Deploy BudgetApp Infrastructure

on:
  push:
    branches:
      - main # Triggers on pushes to the main branch
  workflow_dispatch: # Allows manual triggering from the GitHub UI

jobs:
  # Job 1: Deploy the core database infrastructure (VPC, Subnets, RDS)
  # This stack will be deployed initially with public access for schema loading.
  deploy-database-initial:
    runs-on: ubuntu-latest
    outputs:
      VPC_ID: ${{ steps.get_db_outputs.outputs.VPC_ID }}
      AURORA_ENDPOINT: ${{ steps.get_db_outputs.outputs.AURORA_ENDPOINT }}
      AURORA_PORT: ${{ steps.get_db_outputs.outputs.AURORA_PORT }}
      RDS_SECURITY_GROUP_ID: ${{ steps.get_db_outputs.outputs.RDS_SECURITY_GROUP_ID }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy Database Stack (Initial - Public Access)
        run: |
          aws cloudformation deploy \
            --template-file db-stack.yml \
            --stack-name budgetapp-database \
            --parameter-overrides \
                Cidr="10.0.0.0/16" \
                ContainerAV="us-east-1a" \
                ContainerAV2="us-east-1b" \
                DBAV="us-east-1c" \
                DBAV2="us-east-1d" \
                DBSubnetCidr="10.0.3.0/24" \
                DBSubnetCidr2="10.0.4.0/24" \
                MasterUsername="${{ secrets.DB_USERNAME }}" \
                MasterUserPassword="${{ secrets.DB_PASSWORD }}" \
                DBName="${{ secrets.DB_NAME }}" \
                MinCapacity=0 \
                MaxCapacity=1 \
            --capabilities CAPABILITY_NAMED_IAM

      - name: Get Database Stack Outputs
        id: get_db_outputs # ID for this step to reference its outputs
        run: |
          VPC_ID_VALUE=$(aws cloudformation describe-stacks --stack-name budgetapp-database --query "Stacks[0].Outputs[?OutputKey=='VPCId'].OutputValue" --output text)
          AURORA_ENDPOINT_VALUE=$(aws cloudformation describe-stacks --stack-name budgetapp-database --query "Stacks[0].Outputs[?OutputKey=='AuroraClusterEndpoint'].OutputValue" --output text)
          AURORA_PORT_VALUE=$(aws cloudformation describe-stacks --stack-name budgetapp-database --query "Stacks[0].Outputs[?OutputKey=='AuroraClusterPort'].OutputValue" --output text)
          RDS_SECURITY_GROUP_ID_VALUE=$(aws cloudformation describe-stacks --stack-name budgetapp-database --query "Stacks[0].Outputs[?OutputKey=='RDSInstanceSecurityGroupId'].OutputValue" --output text)
          DB_NAME_VALUE=$(aws cloudformation describe-stacks --stack-name budgetapp-database --query "Stacks[0].Outputs[?OutputKey=='DBNameOutput'].OutputValue" --output text)

          echo "VPC_ID=$VPC_ID_VALUE" >> $GITHUB_OUTPUT
          echo "AURORA_ENDPOINT=$AURORA_ENDPOINT_VALUE" >> $GITHUB_OUTPUT
          echo "AURORA_PORT=$AURORA_PORT_VALUE" >> $GITHUB_OUTPUT
          echo "RDS_SECURITY_GROUP_ID=$RDS_SECURITY_GROUP_ID_VALUE" >> $GITHUB_OUTPUT
          echo "DB_NAME_OUTPUT=$DB_NAME_VALUE" >> $GITHUB_OUTPUT

  # Job 2: Install MySQL client and load the database schema
  load-db-schema:
    runs-on: ubuntu-latest
    needs: deploy-database-initial
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install MySQL Client
        run: |
          sudo apt-get update -y
          sudo apt-get install mysql-client -y

      - name: Load Database Schema
        run: |
          echo "Attempting to connect to database: ${{ env.DB_ENDPOINT }}"
          # Use the actual DB_USER and DB_PASSWORD from secrets
          mysql -v -h "${{ env.DB_ENDPOINT }}" -u "${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" < Schema.sql
        env: # Set environment variables for this step's commands
          DB_ENDPOINT: ${{ needs.deploy-database-initial.outputs.AURORA_ENDPOINT }}
          DB_USER: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ needs.deploy-database-initial.outputs.DB_NAME_OUTPUT }}

  # This stack will reference outputs from the database stack.
  deploy-app-infrastructure:
    runs-on: ubuntu-latest
    # Depends on DB privacy update (for sequence) and initial DB deployment (for outputs)
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy Application Infrastructure Stack
        run: |
          aws cloudformation deploy \
            --template-file coreStack.yml \
            --stack-name budgetapp-infrastructure \
            --parameter-overrides \
                Cidr="10.0.0.0/16" \
                ContainerAV="us-east-1a" \
                ContainerAV2="us-east-1b" \
                ContainerSubnetCidr="10.0.1.0/24" \
                ContainerSubnetCidr2="10.0.2.0/24" \
                RepoName="${{ secrets.ECR_REPOSITORY }}" \
                VpcId="${{ needs.deploy-database-initial.outputs.VPC_ID }}" \
                RdsSecurityGroupId="${{ needs.deploy-database-initial.outputs.RDS_SECURITY_GROUP_ID }}" \
                AuroraCluster_Endpoint="${{ needs.deploy-database-initial.outputs.AURORA_ENDPOINT }}" \
                AuroraCluster_Endpoint_Port="${{ needs.deploy-database-initial.outputs.AURORA_PORT }}" \
                DBName="${{ needs.deploy-database-initial.outputs.DB_NAME_OUTPUT }}" \
                MasterUsername="${{ secrets.DB_USERNAME }}" \
                MasterUserPassword="${{ secrets.DB_PASSWORD }}" \
            --capabilities CAPABILITY_NAMED_IAM
        working-directory: ${{ github.workspace }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr

      - name: Build and Push Backend Image
        run: |
          cd backend
          docker build --platform linux/amd64,linux/arm64 -t infrastructure:latest .
          docker tag infrastructure:latest ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:backend
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:backend
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: us-east-1
